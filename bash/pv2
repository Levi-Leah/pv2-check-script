#!/bin/bash

# find current branch
current_branch=$(git rev-parse --abbrev-ref HEAD)
# find the changed files between master and current branch
changed_files=$(git diff --diff-filter=ACM --name-only master..."$current_branch" -- '*.adoc')
#
abstract='[role="_abstract"]'
add_res='[role="_additional-resources"]'

# enable tput colors; from J's script
bold=$(tput bold)
fail="$bold$(tput setaf 1)"
pass="$bold$(tput setaf 2)"
reset=$(tput sgr0)

#######################################################################################
# Checking abstract tags
# record changed files that don't have abstract tag
no_abstract_tag_files=$(echo "$changed_files" | while read line; do grep -FHL --exclude='master.adoc' "$abstract" "$line"; done )

# print a message regarding the abstract tags check
if [ -z "$no_abstract_tag_files" ]; then
    echo "${pass}abstract tags are set${reset}"
else
    echo -e "${fail}no abstract tag in the following files:${reset}\n$no_abstract_tag_files"
fi

abstract_tag_files=$(echo "$changed_files" | while read line; do grep -FHl "$abstract" "$line"; done )

#######################################################################################
# Checking additional resources tags
# record changed files that have additional resources section
add_res_files=$(echo "$changed_files" | while read line; do grep -FHl "Additional resources" "$line"; done )

no_add_res_tag_files=$(echo "$add_res_files" | while read line; do grep -FHL "$add_res" "$line"; done );

if [ -z "$no_add_res_tag_files" ]; then
    #statements
    echo "${pass}additional resorces tags are set (or no files contain additional resources section)${reset}"
else
    echo -e "${fail}no additional resources tag in the following files:${reset}\n$no_add_res_tag_files"
fi
#######################################################################################
# Checking vanilla xrefs
# record changed files that have vanilla xrefs (scipping the comments)
vanilla_xref_files=$(echo "$changed_files" | while read line; do grep -HlE '<<.*>>' "$line"; done )

# print a message regarding vanilla xref check
if [ -z "$vanilla_xref_files" ]; then
    echo "${pass}no vanilla xrefs found${reset}"
else
    echo -e "${fail}vanilla xrefs found in the following files:${reset}\n$vanilla_xref_files"
fi

# Checking in-line anchors
# record changed files that have in-line anchors
in_line_anchor_files=$(echo "$changed_files" | while read line; do grep -HlE "^=.*\[\[.*\]\]" "$line"; done )

# print a message regarding in-line anchors check
if [ -z "$in_line_anchor_files" ]; then
    echo "${pass}no in-line anchors found${reset}"
else
    echo -e "${fail}in-line anchors found in the following files:${reset}\n$in_line_anchor_files"
fi

# Checking human readable label for xrefs
# record changed files that have xrefs without human readable label
xref_files_without_label=$(echo "$changed_files" | while read line; do grep -HlE "xref:.*\[\]" "$line"; done )

# print a message regarding in-line anchors check
if [ -z "$xref_files_without_label" ]; then
    echo "${pass}human readable labels are set (or no files contain xrefs)${reset}"
else
    echo -e "${fail}human readable lebels are missing in the following files:${reset}\n$xref_files_without_label"
fi

# Checking nesting in assemblies
# record changed files that are assemblies
assembly_files=$(echo "$changed_files" | grep "assembly_")

# print a message if no assembly files were changed
if [[ -z "$assembly_files" ]]; then
   echo "${pass}no assembly files were changed${reset}"
fi

# print a message if assembly files were changed
if ! [[ -z "$assembly_files" ]]; then
    # record assemblies that contain other assemblies
    nesting_in_assemblies=$(echo "$assembly_files" | while read line; do grep -HlE "^include::assembly_*" "$line"; done )

    # print a message regarding nesting in assemblies
    if [ -z "$nesting_in_assemblies" ]; then
        echo "${pass}assemblies do not contain nested assemblies${reset}"
    else
        echo -e "${fail}nested assemblies found in the following assemblies:${reset}\n$nesting_in_assemblies"
    fi
    # record assemblies that contain unsopported includes
    unsopported_includes_files=$(echo "$assembly_files" | while read line; do grep -HlE ":leveloffset:" "$line"; done )
    if [ -z "$unsopported_includes_files" ]; then

        # print a message regarding includes in assemblies
        echo "${pass}supported includes are used in assemblies${reset}"
    else
        echo -e "${fail}unsupported includes found in the following files:${reset}\n$unsopported_includes_files"
    fi
fi

# Checking nesting in modules
# record changed modules that have nested modules
module_files=$(echo "$changed_files" | grep "\/modules\/")

nesting_in_modules=$(echo "$module_files" | while read line; do grep -HlE "^include::*" "$line" | grep -Ev "^include::common-content\/"; done )


# print a message regarding nested assemblies
if [ -z "$nesting_in_modules" ]; then
    echo "${pass}modules do not contain nested modules${reset}"
else
    echo -e "${fail}nested modules found in the following modules:${reset}\n$nesting_in_modules"
fi
